name: Test, Build & Deploy to Portainer (Git Stack)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django Tests
        run: python manage.py test --keepdb
        env:
          DJANGO_SETTINGS_MODULE: bootcamp.settings
          SECRET_KEY: dummy-secret
          DEBUG: "False"

  build-and-deploy:
    name: Build Docker and Deploy to Portainer
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:latest .

      - name: Push Docker Image
        run: docker push $IMAGE_NAME:latest

      - name: Get Portainer API Token
        id: get_token
        run: |
          response=$(curl -s -X POST "$PORTAINER_URL/api/auth" \
            -H "Content-Type: application/json" \
            -d '{"Username": "'"$PORTAINER_USER"'", "Password": "'"$PORTAINER_PASSWORD"'"}')
          token=$(echo "$response" | jq -r '.jwt')
          echo "::add-mask::$token"
          echo "token=$token" >> "$GITHUB_OUTPUT"
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_USER: ${{ secrets.PORTAINER_USER }}
          PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}

      - name: Trigger Git Pull in Portainer
        run: |
          curl -s -X POST "$PORTAINER_URL/api/stacks/$PORTAINER_STACK_ID/git/pull" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json"
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_STACK_ID: ${{ secrets.PORTAINER_STACK_ID }}

      - name: Trigger Stack Update in Portainer
        run: |
          curl -s -X POST "$PORTAINER_URL/api/stacks/$PORTAINER_STACK_ID/update" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json"
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_STACK_ID: ${{ secrets.PORTAINER_STACK_ID }}